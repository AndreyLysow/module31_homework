import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.min.js";
import $ from "jquery";
import "./styles/style.css";
import taskFieldTemplate from "./templates/taskField.html";
import noAccessTemplate from "./templates/noAccess.html";
import { User } from "./models/User";
import { generateTestUser } from "./utils";
import { State } from "./state";
import { authUser } from "./services/auth";
import { Tasks, closeAllSelect } from "./models/Tasks";
import { initDragAndDrop } from "./models/dragAndDrop";
import { delLiWithContent, delDivWithContent, delOptionWithContent } from "./models/dragAndDrop";
export const appState = new State();
let myTasks;
let taskInputField;
const loginForm = document.querySelector("#app-login-form");

generateTestUser(User);
loginForm.addEventListener("submit", function (e) {
  e.preventDefault();
  const formData = new FormData(loginForm);
  const login = formData.get("login");
  const password = formData.get("password");

  let fieldHTMLContent = authUser(login, password)
    ? taskFieldTemplate
    : noAccessTemplate;

  document.querySelector("#content").innerHTML = fieldHTMLContent;
  if (!(fieldHTMLContent == '<h1>Sorry, you\'ve no access to this resource!</h1>')) {
    document.title = 'Awesome Kanban board';
    const head = (document.getElementsByTagName("head"))[0];
    const icon = document.createElement("link");
    const backlogAddBtn = document.querySelector('.app-container-backlog > .append-button');
    const backlogSbmt = document.querySelector('.app-container-backlog > button.submit-button');
    const readyAddBtn = document.querySelector('.app-container-ready > .append-button');
    const readySbmt = document.querySelector('.app-container-ready > button.submit-button');
    const inProgressAddBtn = document.querySelector('.app-container-progress > .append-button');
    const inProgressSbmt = document.querySelector('.app-container-progress > button.submit-button');
    const finishedAddBtn = document.querySelector('.app-container-finished > .append-button');
    const finishedSbmt = document.querySelector('.app-container-finished > button.submit-button');
    taskInputField = document.querySelector('.app-task-title_input');
    const backlogList = document.querySelector('.app-list__backlog');
    const readyList = document.querySelector('.app-list__ready');
    const inProgressList = document.querySelector('.app-list__in-progress');
    const finishedList = document.querySelector('.app-list__finished');
    const userMenuToggle = document.querySelector('.app-usermenu');
    const userMenu = document.querySelector('.app-menu__popup');

    icon.setAttribute('rel', 'icon');
    icon.setAttribute('href', "data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üìù</text></svg>");
    head.appendChild(icon);
    myTasks = new Tasks(login);
    document.querySelector('.app-ready-tasks-counter').innerHTML = '0';
    document.querySelector('.app-finished-tasks-counter').innerHTML = '0';
    userMenuToggle.addEventListener('click', function () {
      if (userMenu.style.visibility != 'visible') {
        userMenu.style.visibility = 'visible';
        userMenu.style.opacity = 1;
        document.querySelector('.app-user_arrow').style.transform = 'rotate(180deg)';
      } else {
        document.querySelector('.app-user_arrow').style.transform = 'rotate(0deg)';
        userMenu.style.visibility = 'hidden';
        userMenu.style.opacity = 0;
      }
    });

    backlogAddBtn.addEventListener('click', function () {
      startNewBacklogTask(backlogAddBtn, backlogSbmt, taskInputField);
    });
    taskInputField.addEventListener('keypress', function (event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        backlogSbmt.click();
      }
    });

    
    backlogSbmt.addEventListener('click', function () {
      addNewBacklogTask(backlogSbmt, backlogAddBtn, backlogList, taskInputField, myTasks);
    });

    backlogSbmt.addEventListener('click', function (e) {
      e.preventDefault();
    });

    readyAddBtn.addEventListener('click', function () {
      startNewReadyTask(readyAddBtn, readySbmt); // –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è startNewReadyTask
    });
    readySbmt.addEventListener('click', function () {
      addNewReadyTask(readySbmt, readyAddBtn, readyList, myTasks);
    });
    inProgressAddBtn.addEventListener('click', function () {
      startNewInProgressTask(inProgressAddBtn, inProgressSbmt);
    });
    inProgressSbmt.addEventListener('click', function () {
      addNewInProgressTask(inProgressSbmt, inProgressAddBtn, inProgressList, myTasks);
    });
    finishedAddBtn.addEventListener('click', function () {
      startNewFinishedTask(finishedAddBtn, finishedSbmt);
    });
    finishedSbmt.addEventListener('click', function () {
      addNewFinishedTask(finishedSbmt, finishedAddBtn, finishedList, myTasks);
    });
    document.addEventListener('click', closeAllSelect);
  }

});

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function createTask(text, list, myTasks) {
  const newTaskAsListElement = document.createElement('li');
  newTaskAsListElement.textContent = text;
  // newTaskAsListElement.setAttribute('draggable', 'true');
  newTaskAsListElement.setAttribute('draggable');

  // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  newTaskAsListElement.addEventListener('dragstart', (e) => {
    // –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    e.dataTransfer.setData('text/plain', JSON.stringify({ status: list, text: text }));
  });

  // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  newTaskAsListElement.addEventListener('dragend', (e) => {
   
    console.log('–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
  });

  list.insertBefore(newTaskAsListElement, list.lastElementChild);
  myTasks.writeTask(list, text);
  initDragAndDrop();
}






// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
function handleAddButtonClick(addBtn, sbmtBtn, list, taskInputField, myTasks) {
  addBtn.style.display = 'none';
  taskInputField.style.display = 'block';
  taskInputField.focus();

  sbmtBtn.addEventListener('click', () => {
    const text = taskInputField.value;
    createTask(text, list, myTasks);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–±—Ä–æ—Å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å"
    taskInputField.value = '';
    taskInputField.style.display = 'none';
    addBtn.style.display = 'block';
    addBtn.focus();
  });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ addNewBacklogTask
function addNewBacklogTask(sbmt, btn, backlogList, taskInputField, myTasks) {
  sbmt.style.display = 'none';
  btn.style.display = 'block';

  const newTaskAsListElement = document.createElement('li');
  newTaskAsListElement.textContent = taskInputField.value;
  newTaskAsListElement.setAttribute('draggable', 'true');

  backlogList.insertBefore(newTaskAsListElement, backlogList.firstElementChild);

  myTasks.writeBacklog(taskInputField.value);
  taskInputField.value = '';
  taskInputField.style.display = 'none';
  btn.focus();
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ startNewBacklogTask
function startNewBacklogTask(btn, sbmt, taskInputField) {
  btn.style.display = 'none';
  taskInputField.style.display = 'block';
  taskInputField.focus();
  initDragAndDrop();
}




// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ addNewInProgressTask
function addNewInProgressTask(sbmtBtn, addBtn, inProgressList, myTasks) {
  const selectMarker = document.querySelector('.app-ready-items > .app-select__list > .app-selection-marker');
  const selectedTask = document.querySelector('.app-progress-items > .app-select__list > .select-items > .same-as-selected');

  updateElementDisplay(sbmtBtn, 'none');
  updateElementDisplay(addBtn, 'block');

  if (!selectedTask) {
    alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!');
    return;
  }

  const newInProgressTaskText = selectedTask.innerText;
  const newTaskAsListElement = document.createElement('li');
  newTaskAsListElement.setAttribute('draggable', 'true');
  newTaskAsListElement.appendChild(document.createTextNode(newInProgressTaskText));
  inProgressList.insertBefore(newTaskAsListElement, inProgressList.lastElementChild);

  myTasks.writeInProgress(newInProgressTaskText);

  const nextSibling = selectedTask.nextSibling;
  const prevSibling = selectedTask.previousSibling;

  if (nextSibling) {
    nextSibling.classList.add('same-as-selected');
  } else if (prevSibling) {
    prevSibling.classList.add('same-as-selected');
  } else {
    addBtn.disabled = true;
  }

  const readySelectList = document.querySelector('.app-progress-items > .app-select__list > .select-items');

  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (readySelectList.contains(selectedTask)) {
    readySelectList.removeChild(selectedTask);
  }

  delLiWithContent(selectMarker, newInProgressTaskText);
  delOptionWithContent(selectMarker, newInProgressTaskText);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ startNewReadyTask
function startNewReadyTask(addBtn, sbmtBtn) {
  updateElementDisplay(addBtn, 'none');
  updateElementDisplay(document.querySelector('.app-ready-items > .app-select__list > .select-selected'), 'block');
  updateElementDisplay(sbmtBtn, 'block');
  sbmtBtn.focus();
}


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ addNewReadyTask
function addNewReadyTask(sbmtBtn, addBtn, readyList, myTasks) {
  const selectMarker = document.querySelector('.app-progress-items > .app-select__list > .app-selection-marker');
  const selectedTask = document.querySelector('.app-ready-items > .app-select__list > .select-items > .same-as-selected');

  updateElementDisplay(sbmtBtn, 'none');
  updateElementDisplay(addBtn, 'block');

  if (!selectedTask) {
    alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!');
    return;
  }

  const newReadyTaskText = selectedTask.innerText;
  const newTaskAsListElement = document.createElement('li');

  // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç draggable –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞
  newTaskAsListElement.setAttribute('draggable', 'true');

  newTaskAsListElement.appendChild(document.createTextNode(newReadyTaskText));
  readyList.insertBefore(newTaskAsListElement, readyList.lastElementChild);

  myTasks.writeReady(newReadyTaskText);

  const nextSibling = selectedTask.nextSibling;
  const prevSibling = selectedTask.previousSibling;

  if (nextSibling) {
    nextSibling.classList.add('same-as-selected');
  } else if (prevSibling) {
    prevSibling.classList.add('same-as-selected');
  } else {
    addBtn.disabled = true;
  }

  selectedTask.remove();
  delLiWithContent(selectMarker, newReadyTaskText);
  delOptionWithContent(selectMarker, newReadyTaskText);

  // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "dragover" –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  newTaskAsListElement.addEventListener('dragover', (e) => {
    e.preventDefault();
  });

  // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "drop" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  newTaskAsListElement.addEventListener('drop', (e) => {
    e.preventDefault();
    const data = e.dataTransfer.getData('text/plain');
    const taskData = JSON.parse(data);
    createTask(taskData.text, readyList, myTasks);
  });
}


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ startNewInProgressTask
function startNewInProgressTask(addBtn, sbmtBtn) {
  updateElementDisplay(addBtn, 'none');
  updateElementDisplay(document.querySelector('.app-progress-items > .app-select__list > .select-selected'), 'block');
  updateElementDisplay(sbmtBtn, 'block');
  sbmtBtn.focus();
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ addNewFinishedTask
function addNewFinishedTask(sbmtBtn, addBtn, finishedList, myTasks) {
  const selectMarker = document.querySelector('.app-progress-items > .app-select__list > .app-selection-marker');
  const selectedTask = document.querySelector('.app-finished-items > .app-select__list > .select-items > .same-as-selected');

  updateElementDisplay(sbmtBtn, 'none');
  updateElementDisplay(addBtn, 'block');

  if (!selectedTask) {
    alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!');
    return;
  }

  const newFinishedTaskText = selectedTask.innerText;
  const newTaskAsListElement = document.createElement('li');
  newTaskAsListElement.setAttribute('draggable', 'true');
  newTaskAsListElement.appendChild(document.createTextNode(newFinishedTaskText));
  finishedList.insertBefore(newTaskAsListElement, finishedList.lastElementChild);

  myTasks.writeFinished(newFinishedTaskText);

  const nextSibling = selectedTask.nextSibling;
  const prevSibling = selectedTask.previousSibling;

  if (nextSibling) {
    nextSibling.classList.add('same-as-selected');
  } else if (prevSibling) {
    prevSibling.classList.add('same-as-selected');
  } else {
    addBtn.disabled = true;
  }

  const readySelectList = document.querySelector('.app-finished-items > .app-select__list > .select-items');

  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (readySelectList.contains(selectedTask)) {
    readySelectList.removeChild(selectedTask);
  }

  delLiWithContent(selectMarker, newFinishedTaskText);
  delOptionWithContent(selectMarker, newFinishedTaskText);
}

function startNewFinishedTask(addBtn, sbmtBtn) {
  updateElementDisplay(addBtn, 'none');
  updateElementDisplay(document.querySelector('.app-finished-items > .app-select__list > .select-selected'), 'block');
  updateElementDisplay(sbmtBtn, 'block');
  sbmtBtn.focus();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –≤ Ready
const readyAddBtn = document.querySelector('.app-container-ready > .append-button');
const readySbmt = document.querySelector('.app-container-ready > button.submit-button');
const readyList = document.querySelector('.app-list__ready');

handleAddButtonClick(readyAddBtn, readySbmt, readyList, taskInputField, myTasks);
// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è inProgress –∏ finished
const inProgressAddBtn = document.querySelector('.app-container-progress > .append-button');
const inProgressSbmt = document.querySelector('.app-container-progress > button.submit-button');
const inProgressList = document.querySelector('.app-list__in-progress');

handleAddButtonClick(inProgressAddBtn, inProgressSbmt, inProgressList, taskInputField, myTasks);

const finishedAddBtn = document.querySelector('.app-container-finished > .append-button');
const finishedSbmt = document.querySelector('.app-container-finished > button.submit-button');
const finishedList = document.querySelector('.app-list__finished');

handleAddButtonClick(finishedAddBtn, finishedSbmt, finishedList, taskInputField, myTasks);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
function updateElementDisplay(element, displayValue) {
  if (element) {
    element.style.display = displayValue;
  }
}


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
function toggleElementDisplay(element, displayValue) {
  if (element) {
    element.style.display = displayValue;
  }
}

